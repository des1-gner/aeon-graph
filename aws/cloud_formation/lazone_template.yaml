AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for LaZone API with DynamoDB, Lambda, API Gateway, S3, and CloudFront'

Resources:
  LaZoneTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: 'lazone'
      AttributeDefinitions:
        - AttributeName: articleId
          AttributeType: N
      KeySchema:
        - AttributeName: articleId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      TableClass: STANDARD
      DeletionProtectionEnabled: false
      Tags:
        - Key: Project
          Value: LaZone
        - Key: Environment
          Value: Production

  LaZoneLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: 'LaZoneLambdaRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - 'arn:aws:iam::aws:policy/AmazonDynamoDBReadOnlyAccess'
      Policies:
        - PolicyName: DAXScanAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'dax:Scan'
                Resource: '*'
      Tags:
        - Key: Project
          Value: LaZone
        - Key: Environment
          Value: Production

  LaZoneLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: 'lazone'
      Handler: 'index.lambda_handler'
      Role: !GetAtt LaZoneLambdaRole.Arn
      Code:
        ZipFile: |
          def lambda_handler(event, context):
              return {
                  'statusCode': 200,
                  'body': 'Hello from LaZone Lambda!'
              }
      Runtime: 'python3.9'
      Timeout: 20
      Tags:
        - Key: Project
          Value: LaZone
        - Key: Environment
          Value: Production

  LaZoneApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: 'lazone'
      EndpointConfiguration:
        Types:
          - REGIONAL
      Tags:
        - Key: Project
          Value: LaZone
        - Key: Environment
          Value: Production

  LaZoneApiResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref LaZoneApi
      ParentId: !GetAtt LaZoneApi.RootResourceId
      PathPart: 'lazone'

  LaZoneApiMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref LaZoneApi
      ResourceId: !Ref LaZoneApiResource
      HttpMethod: GET
      AuthorizationType: NONE
      RequestParameters:
        method.request.querystring.endDate: true
        method.request.querystring.search: true
        method.request.querystring.source: true
        method.request.querystring.startDate: true
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 
          - 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations'
          - lambdaArn: !GetAtt LaZoneLambda.Arn

  LaZoneApiDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    DependsOn:
      - LaZoneApiMethod
    Properties:
      RestApiId: !Ref LaZoneApi

  LaZoneApiStage:
    Type: 'AWS::ApiGateway::Stage'
    Properties:
      DeploymentId: !Ref LaZoneApiDeployment
      RestApiId: !Ref LaZoneApi
      StageName: 'prod'

  LambdaApiGatewayPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref LaZoneLambda
      Principal: 'apigateway.amazonaws.com'
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${LaZoneApi}/*'

  LaZoneBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub "lazone-${AWS::AccountId}-${AWS::Region}"
      WebsiteConfiguration:
        IndexDocument: 'index.html'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      Tags:
        - Key: Project
          Value: LaZone
        - Key: Environment
          Value: Production


  LaZoneBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref LaZoneBucket
      PolicyDocument:
        Version: '2008-10-17'
        Id: 'PolicyForPublicAccess'
        Statement:
          - Sid: 'AllowPublicAccess'
            Effect: 'Allow'
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Sub 'arn:aws:s3:::${LaZoneBucket}/*'

  LaZoneCloudFront:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultRootObject: 'index.html'
        Origins:
          - DomainName: !Select [2, !Split ['/', !GetAtt LaZoneBucket.WebsiteURL]]
            Id: 'S3Origin'
            CustomOriginConfig:
              OriginProtocolPolicy: 'http-only'
              HTTPPort: 80
              HTTPSPort: 443
              OriginSSLProtocols: ['TLSv1.2']
        DefaultCacheBehavior:
          TargetOriginId: 'S3Origin'
          ViewerProtocolPolicy: 'redirect-to-https'
          CachePolicyId: '658327ea-f89d-4fab-a63d-7e88639e58f6' # CacheOptimized
          OriginRequestPolicyId: '88a5eaf4-2fd4-4709-b370-b4c650ea3fcf' # CORS-S3Origin
        PriceClass: 'PriceClass_All'  # All edge locations
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
      Tags:
        - Key: Project
          Value: LaZone
        - Key: Environment
          Value: Production

Outputs:
  ApiEndpoint:
    Description: 'API Gateway endpoint URL for prod stage'
    Value: !Sub 'https://${LaZoneApi}.execute-api.${AWS::Region}.amazonaws.com/prod/lazone'
  
  BucketWebsiteURL:
    Description: 'URL for website hosted on S3'
    Value: !GetAtt LaZoneBucket.WebsiteURL
  
  CloudFrontDomainName:
    Description: 'CloudFront Distribution Domain Name'
    Value: !GetAtt LaZoneCloudFront.DomainName