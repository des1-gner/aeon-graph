# =====================================================================================================
# CloudFormation Template for Enhanced Secure Infrastructure
# =====================================================================================================
# Maintainers:
# - Oisin Aeonn (s3952320@student.rmit.edu.au)
# - Jermaine Portelli (s3935138@student.rmit.edu.au)
#
# Version History:
# v1.0.0 (2024-08-19) - Initial Creation
# - Basic S3 bucket setup
# - DynamoDB table creation
# - Lambda function implementation
# - API Gateway configuration
#
# v1.1.0 (2024-09-07) - Security Configuration
# - Implemented GuardDuty
# - Added Security Hub integration
# - Configured CloudTrail
# - Added WAF implementation
# - Enhanced S3 bucket security
#
# v1.2.0 (2024-09-11) - CI/CD Pipeline Implementation
# - Added CodeBuild project
# - Configured CodePipeline
# - Created artifact bucket
# - Implemented deployment stages
# - Added IAM roles for CI/CD
#
# v1.3.0 (2024-10-01) - Infrastructure Monitoring
# - Added CloudWatch configurations
# - Implemented logging
# - Enhanced security group rules
# - Added Inspector configuration
# - Implemented Macie
#
# v1.4.0 (2024-10-12) - Performance Optimization
# - Added CloudFront distribution
# - Optimized Lambda settings
# - Enhanced DynamoDB configuration
# - Added SSL/TLS support
# - Implemented caching policies

# Requirements are authentication into our private GitHub Repo, an AWS Account, and initial required IAM Permissions for CloudFormation Stack to be run
# Deployment Guide:
# Console Deployment:
# 1. AWS Console -> CloudFormation -> Create Stack -> Upload template
# 2. Enter stack name and required parameters
# 3. Review and create stack
#
# CLI Deployment:
# 1. Install AWS CLI: https://aws.amazon.com/cli/
# 2. Configure: `aws configure` (enter AWS credentials)
# 3. Validate: `aws cloudformation validate-template --template-body file://lazone-infrastructure.yaml`
# 4. Deploy: `aws cloudformation create-stack --stack-name lazone-stack --template-body file://lazone-infrastructure.yaml --parameters ParameterKey=CertificateArn,ParameterValue=<your-cert-arn> --capabilities CAPABILITY_IAM`
# 5. Monitor: `aws cloudformation describe-stacks --stack-name lazone-stack`


AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Enhanced secure infrastructure with GuardDuty, Security Hub, and other security features

# =====================================================================================================
# Parameters Section
# =====================================================================================================
Parameters:
  CertificateArn:
    Type: String
    Description: ARN of the SSL certificate for CloudFront distribution

# =====================================================================================================
# Resources Section
# =====================================================================================================
Resources:
  # ----------------------------------------------------------------------------------------------------
  # Security Services Configuration
  # ----------------------------------------------------------------------------------------------------
  # GuardDuty - AWS threat detection service
  GuardDutyDetector:
    Type: AWS::GuardDuty::Detector
    Properties:
      Enable: true  # Enables continuous security monitoring
      DataSources:
        S3Logs:
          Enable: true  # Enables S3 bucket activity monitoring

  # Security Hub - Centralized security management
  SecurityHub:
    Type: AWS::SecurityHub::Hub
    Properties: {}  # Uses default settings for security standards

  # CloudTrail - AWS API activity logging
  CloudTrail:
    Type: AWS::CloudTrail::Trail
    DependsOn:
      - CloudTrailBucketPolicy
    Properties:
      IsLogging: true
      EnableLogFileValidation: true  # Ensures log file integrity
      IncludeGlobalServiceEvents: true
      IsMultiRegionTrail: true  # Logs events from all regions
      S3BucketName: !Ref CloudTrailBucket

  # S3 Bucket for CloudTrail logs with encryption
  CloudTrailBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain  # Prevents accidental deletion
    Properties:
      VersioningConfiguration:
        Status: Enabled  # Maintains version history of logs
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256  # Ensures data encryption at rest

  # CloudTrail S3 bucket access policy
  CloudTrailBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref CloudTrailBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AWSCloudTrailAclCheck
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: s3:GetBucketAcl
            Resource: !GetAtt CloudTrailBucket.Arn
          - Sid: AWSCloudTrailWrite
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: s3:PutObject
            Resource: !Sub ${CloudTrailBucket.Arn}/*
            Condition:
              StringEquals:
                s3:x-amz-acl: bucket-owner-full-control

  # Amazon Inspector - Automated security assessment
  Inspector:
    Type: AWS::Inspector::AssessmentTarget
    Properties:
      AssessmentTargetName: !Sub ${AWS::StackName}-assessment-target
      ResourceGroupArn: !GetAtt InspectorResourceGroup.Arn

  # Inspector resource group for assessment scope
  InspectorResourceGroup:
    Type: AWS::Inspector::ResourceGroup
    Properties:
      Tags:
        - Key: Inspector
          Value: true

  # Amazon Macie - Data security and privacy
  Macie:
    Type: AWS::Macie::Session
    Properties:
      Status: ENABLED

  # ----------------------------------------------------------------------------------------------------
  # Web Application Firewall (WAF) Configuration
  # ----------------------------------------------------------------------------------------------------
  WAFWebACL:
    Type: AWS::WAFv2::WebACL
    Properties:
      Name: !Sub ${AWS::StackName}-webacl
      Description: WAF rules for API Gateway and CloudFront
      Scope: REGIONAL
      DefaultAction:
        Allow: {}  # Default allow with specific deny rules
      Rules:
        - Name: AWSManagedRulesCommonRuleSet
          Priority: 1
          OverrideAction:
            None: {}
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesCommonRuleSet
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: AWSManagedRulesCommonRuleSetMetric

  # ----------------------------------------------------------------------------------------------------
  # API Gateway Configuration
  # ----------------------------------------------------------------------------------------------------
  lazoneAPIGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name:
        Fn::Sub:
          - "${ResourceName} From Stack ${AWS::StackName}"
          - ResourceName: lazoneAPIGateway
      StageName: Prod
      DefinitionBody:
        openapi: "3.0"
        info: {}
        paths:
          /:
            get:
              parameters:
                - name: endDate
                  in: query
                  required: false
                  schema:
                    type: string
                - name: search
                  in: query
                  required: false
                  schema:
                    type: string
                - name: source
                  in: query
                  required: false
                  schema:
                    type: string
                - name: startDate
                  in: query
                  required: false
                  schema:
                    type: string
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lazoneLambda.Arn}/invocations
              responses: {}
      EndpointConfiguration: REGIONAL
      TracingEnabled: true  # Enables X-Ray tracing
      Cors:
        MaxAge: 5  # CORS configuration for browser security

  # ----------------------------------------------------------------------------------------------------
  # Lambda Function Configuration
  # ----------------------------------------------------------------------------------------------------
  lazoneLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Description: Lambda function with principle of least privilege
      MemorySize: 128  # Optimized for cost and performance
      Timeout: 20  # Maximum execution time
      Handler: lambda_function.lambda_handler
      Runtime: python3.9
      Architectures:
        - arm64  # Using ARM architecture for better price/performance
      EphemeralStorage:
        Size: 512
      EventInvokeConfig:
        MaximumEventAgeInSeconds: 21600
        MaximumRetryAttempts: 2
      PackageType: Zip
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:Query
                - dynamodb:Scan
              Resource: !GetAtt lazoneDynamodb.Arn
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}-*
      Events:
        lazoneAPIGatewayGET:
          Type: Api
          Properties:
            Path: /
            Method: GET
            RestApiId: !Ref lazoneAPIGateway
      Environment:
        Variables:
          LAZONEDYNAMODB_TABLE_NAME: !Ref lazoneDynamodb
          LAZONEDYNAMODB_TABLE_ARN: !GetAtt lazoneDynamodb.Arn

  # ----------------------------------------------------------------------------------------------------
  # S3 Website Hosting Configuration
  # ----------------------------------------------------------------------------------------------------
  lazoneS3:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-lazones3-${AWS::AccountId}
      WebsiteConfiguration:
        IndexDocument: index.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false  # Required for static website hosting
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false

  # S3 bucket public access policy
  lazoneS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref lazoneS3
      PolicyDocument:
        Version: '2008-10-17'
        Id: PolicyForPublicAccess
        Statement:
          - Sid: AllowPublicAccess
            Effect: Allow
            Principal: '*'
            Action: s3:GetObject
            Resource: !Sub ${lazoneS3.Arn}/*

  # ----------------------------------------------------------------------------------------------------
  # CloudFront Distribution Configuration
  # ----------------------------------------------------------------------------------------------------
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - aeonify.net
        Origins:
          - DomainName: !GetAtt lazoneS3.WebsiteURL
            Id: S3Origin
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: http-only
        Enabled: true
        DefaultRootObject: index.html
        PriceClass: PriceClass_All
        ViewerCertificate:
          AcmCertificateArn: !Ref CertificateArn
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2021
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6  # CachingOptimized
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
            - OPTIONS
          Compress: true
          WebACLId: !GetAtt WAFWebACL.Arn

  # ----------------------------------------------------------------------------------------------------
  # EC2 Instance Configuration
  # ----------------------------------------------------------------------------------------------------
  DynamoDBAccessInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0a24e6e101933d294  # Amazon Linux 2 AMI
      InstanceType: t2.micro
      SubnetId: !Ref DefaultPublicSubnet
      SecurityGroups:
        - !Ref EC2SecurityGroup
      Tags:
        - Key: Name
          Value: dynamo_db_access

  # Security group for EC2 instance
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for EC2 instance
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0  # Note: Restrict this in production

  # ----------------------------------------------------------------------------------------------------
  # CI/CD Pipeline Configuration
  # ----------------------------------------------------------------------------------------------------
  # S3 bucket for artifacts
  ArtifactBucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled

  # CodeBuild service role
  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess

  # CodeBuild project configuration
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub ${AWS::StackName}-build
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:5.0
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              runtime-versions:
                nodejs: 20
              commands:
                - npm install
            build:
              commands:
                - npm run build
          artifacts:
            files:
              - '**/*'
            base-directory: build

  # CI/CD Pipeline
  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactBucket
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeCommit
                Version: '1'
              Configuration:
                RepositoryName: !Ref RepositoryName
                BranchName: main
              OutputArtifacts:
                - Name: SourceCode
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              Configuration:
                ProjectName: !Ref CodeBuildProject
              InputArtifacts:
                - Name: SourceCode
              OutputArtifacts:
                - Name: BuildOutput
        - Name: Deploy
          Actions:
            - Name: Deploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: S3
                Version: '1'
              Configuration:
                BucketName: !Ref lazoneS3
                Extract: true
              InputArtifacts:
                - Name: BuildOutput

  # CodePipeline service role
  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodePipelineFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess

  # ----------------------------------------------------------------------------------------------------
  # DynamoDB Configuration
  # ----------------------------------------------------------------------------------------------------
  lazoneDynamodb:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: articleId  # Primary key for articles
          AttributeType: N  # Number type
      BillingMode: PAY_PER_REQUEST  # On-demand pricing for cost optimization
      KeySchema:
        - AttributeName: articleId
          KeyType: HASH  # Partition key
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES  # Enables DynamoDB Streams for change tracking

# =====================================================================================================
# Outputs Section - Resource Information
# =====================================================================================================
Outputs:
  CloudFrontDomainName:
    Description: CloudFront Distribution Domain Name
    Value: !GetAtt CloudFrontDistribution.DomainName

  APIGatewayURL:
    Description: API Gateway URL
    Value: !Sub https://${lazoneAPIGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod/

  S3WebsiteURL:
    Description: S3 Website URL
    Value: !GetAtt lazoneS3.WebsiteURL